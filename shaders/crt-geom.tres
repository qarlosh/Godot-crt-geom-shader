[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "/*
	Port of libretro's crt-geom.glsl to Godot shading language.
	Source: https://github.com/libretro/glsl-shaders/blob/master/crt/shaders/crt-geom.glsl
	
	This program is free software; you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the Free
	Software Foundation; either version 2 of the License, or (at your option)
	any later version.
*/

shader_type canvas_item;
render_mode blend_mix;

// CRTGeom Target Gamma
uniform float CRTgamma: hint_range(0.1, 5.0, 0.1) = 2.4; // hola

// CRTGeom Monitor Gamma
uniform float monitorgamma: hint_range(0.1, 5.0, 0.1) = 2.2;

// CRTGeom Distance
uniform float d: hint_range(0.1, 3.0, 0.1) = 1.6;

// CRTGeom Curvature Toggle
uniform float CURVATURE: hint_range(0.0, 1.0, 1.0) = 1.0;

// CRTGeom Curvature Radius
uniform float R: hint_range(0.1, 10.0, 0.1) = 2.0;

// CRTGeom Corner Size
uniform float cornersize: hint_range(0.001, 1.0, 0.005) = 0.03;

// CRTGeom Corner Smoothness
uniform float cornersmooth: hint_range(80.0, 2000.0, 100.0) = 1000.0;

// CRTGeom Horizontal Tilt
uniform float x_tilt: hint_range(-0.5, 0.5, 0.05) = 0.0;

// CRTGeom Vertical Tilt
uniform float y_tilt: hint_range(-0.5, 0.5, 0.05) = 0.0;

// CRTGeom Horiz. Overscan %
uniform float overscan_x: hint_range(-125.0, 125.0, 1.0) = 100.0;

// CRTGeom Vert. Overscan %
uniform float overscan_y: hint_range(-125.0, 125.0, 1.0) = 100.0;

// CRTGeom Dot Mask Toggle
uniform float DOTMASK: hint_range(0.0, 0.3, 0.3) = 0.3;

// CRTGeom Sharpness
uniform float SHARPER: hint_range(1.0, 3.0, 1.0) = 1.0;

// CRTGeom Scanline Weight
uniform float scanline_weight: hint_range(0.1, 0.5, 0.05) = 0.3;

// CRTGeom Luminance
uniform float lum: hint_range(0.0, 0.1, 0.01) = 0.0;

// CRTGeom Interlacing Simulation
uniform float interlace_detect: hint_range(0.0, 1.0, 1.0) = 1.0;

uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
uniform int FrameCount;
//uniform int FrameDirection; // not used

varying vec2 overscan;
varying vec2 aspect;
varying vec3 stretch;
varying vec2 sinangle;
varying vec2 cosangle;
varying vec2 one;
varying float mod_factor;
varying vec2 ilfac;

/*
NOTE: Godot shading language does not support \"\"#define\", so \"FIX(c)\"
has been inlined where used, and commented accordingly.
*/
//#define FIX(c) max(abs(c), 1e-5);

float intersect(vec2 xy) {
	float A = dot(xy,xy)+d*d;
	float B = 2.0*(R*(dot(xy,sinangle)-d*cosangle.x*cosangle.y)-d*d);
	float C = d*d + 2.0*R*d*cosangle.x*cosangle.y;
	return (-B-sqrt(B*B-4.0*A*C))/(2.0*A);
}

vec2 bkwtrans(vec2 xy) {
	float c = intersect(xy);
	vec2 point = vec2(c)*xy;
	point -= vec2(-R)*sinangle;
	point /= vec2(R);
	vec2 tang = sinangle/cosangle;
	vec2 poc = point/cosangle;
	float A = dot(tang,tang)+1.0;
	float B = -2.0*dot(poc,tang);
	float C = dot(poc,poc)-1.0;
	float a = (-B+sqrt(B*B-4.0*A*C))/(2.0*A);
	vec2 uv = (point-a*sinangle)/cosangle;
	float r = max(abs( R*acos(a) ), 1e-5); // FIX(R*acos(a))
	return uv*r/sin(r/R);
}

vec2 fwtrans(vec2 uv) {
	float r = max(abs( sqrt(dot(uv,uv)) ), 1e-5); // FIX(sqrt(dot(uv,uv)))
	uv *= sin(r/R)/r;
	float x = 1.0-cos(r/R);
	float D = d/R + x*cosangle.x*cosangle.y+dot(uv,sinangle);
	return d*(uv*cosangle-x*sinangle)/D;
}

vec3 maxscale() {
	vec2 c = bkwtrans(-R * sinangle / (1.0 + R/d*cosangle.x*cosangle.y));
	vec2 a = vec2(0.5,0.5)*aspect;
	vec2 lo = vec2(fwtrans(vec2(-a.x,c.y)).x, fwtrans(vec2(c.x,-a.y)).y)/aspect;
	vec2 hi = vec2(fwtrans(vec2(+a.x,c.y)).x, fwtrans(vec2(c.x,+a.y)).y)/aspect;
	return vec3((hi+lo)*aspect*0.5,max(hi.x-lo.x,hi.y-lo.y));
}


void vertex() {
	// START of parameters
	
	// gamma of simulated CRT
	//CRTgamma = 1.8;
	
	// gamma of display monitor (typically 2.2 is correct)
	//monitorgamma = 2.2;
	
	// overscan (e.g. 1.02 for 2% overscan)
	overscan = vec2(1.00,1.00);
	
	// aspect ratio
	aspect = vec2(1.0, 0.75);
	
	// lengths are measured in units of (approximately) the width
	// of the monitor simulated distance from viewer to monitor
	//d = 2.0;
	
	// radius of curvature
	//R = 1.5;
	
	// tilt angle in radians
	// (behavior might be a bit wrong if both components are
	// nonzero)
	const vec2 angle = vec2(0.0, 0.0);
	
	// size of curved corners
	//cornersize = 0.03;
	
	// border smoothness parameter
	// decrease if borders are too aliased
	//cornersmooth = 1000.0;
	
	// END of parameters
	
	// Precalculate a bunch of useful values we'll need in the fragment
	// shader.
	sinangle = sin(vec2(x_tilt, y_tilt)) + vec2(0.001);//sin(vec2(max(abs(x_tilt), 1e-3), max(abs(y_tilt), 1e-3)));
	cosangle = cos(vec2(x_tilt, y_tilt)) + vec2(0.001);//cos(vec2(max(abs(x_tilt), 1e-3), max(abs(y_tilt), 1e-3)));
	stretch = maxscale();
	
	ilfac = vec2(1.0,clamp(floor(InputSize.y/200.0), 1.0, 2.0));
	
	// The size of one texel, in texture-coordinates.
	vec2 sharpTextureSize = vec2(SHARPER * TextureSize.x, TextureSize.y);
	one = ilfac / sharpTextureSize;
	
	// Resulting X pixel-coordinate of the pixel we're drawing.
	mod_factor = UV.x * TextureSize.x * OutputSize.x / InputSize.x;
}

/*
NOTE: Godot shading language does not support \"\"#define\", so these ones
must be commented/uncommented in the corresponding \"#ifdef\"/\"#ifNdef\" sections.
*/

// Enable interpolation in linear gamma (disable for gain speed).
// Default in original GLSL source: enabled
//#define LINEAR_PROCESSING

// Enable 3x oversampling of the beam profile
// Default in original GLSL source: enabled
//#define OVERSAMPLE

// Use the older, purely gaussian beam profile
// Default in original GLSL source: disabled
//#define USEGAUSSIAN

const float PI = 3.141592653589;

/*
NOTE: Godot shading language does not support \"\"#define\", so \"TEX2D(c)\"
has been inlined and enclosed in corresponding \"\"#ifdef LINEAR_PROCESSING\"
blocks.
*/

//#ifdef LINEAR_PROCESSING
//#define TEX2D(c) pow(COMPAT_TEXTURE(Texture, (c)), vec4(CRTgamma))
//#else
//#define TEX2D(c) COMPAT_TEXTURE(Texture, (c))
//#endif

vec2 transform(vec2 coord) {
	coord *= TextureSize / InputSize;
	coord = (coord-vec2(0.5))*aspect*stretch.z+stretch.xy;
	return (bkwtrans(coord)/vec2(overscan_x / 100.0, overscan_y / 100.0)/aspect+vec2(0.5)) * InputSize / TextureSize;
}

float corner(vec2 coord) {
	coord *= TextureSize / InputSize;
	coord = (coord - vec2(0.5)) * vec2(overscan_x / 100.0, overscan_y / 100.0) + vec2(0.5);
	coord = min(coord, vec2(1.0)-coord) * aspect;
	vec2 cdist = vec2(cornersize);
	coord = (cdist - min(coord,cdist));
	float dist = sqrt(dot(coord,coord));
	return clamp((cdist.x-dist)*cornersmooth,0.0, 1.0);
}

// Calculate the influence of a scanline on the current pixel.
//
// 'distance' is the distance in texture coordinates from the current
// pixel to the scanline in question.
// 'color' is the colour of the scanline at the horizontal location of
// the current pixel.
vec4 scanlineWeights(float distance, vec4 color) {
	// \"wid\" controls the width of the scanline beam, for each RGB
	// channel The \"weights\" lines basically specify the formula
	// that gives you the profile of the beam, i.e. the intensity as
	// a function of distance from the vertical center of the
	// scanline. In this case, it is gaussian if width=2, and
	// becomes nongaussian for larger widths. Ideally this should
	// be normalized so that the integral across the beam is
	// independent of its width. That is, for a narrower beam
	// \"weights\" should have a higher peak at the center of the
	// scanline than for a wider beam.

	//#ifdef USEGAUSSIAN
	//vec4 wid = 0.3 + 0.1 * pow(color, vec4(3.0));
	//vec4 weights = vec4(distance / wid);
	//return (lum + 0.4) * exp(-weights * weights) / wid;
	//#else
	vec4 wid = 2.0 + 2.0 * pow(color, vec4(4.0));
	vec4 weights = vec4(distance / scanline_weight);
	return (lum + 1.4) * exp(-pow(weights * inversesqrt(0.5 * wid), wid)) / (0.6 + 0.2 * wid);
	//#endiF
}


void fragment() {
	// Here's a helpful diagram to keep in mind while trying to
	// understand the code:
	//
	//  |      |      |      |      |
	// -------------------------------
	//  |      |      |      |      |
	//  |  01  |  11  |  21  |  31  | <-- current scanline
	//  |      | @    |      |      |
	// -------------------------------
	//  |      |      |      |      |
	//  |  02  |  12  |  22  |  32  | <-- next scanline
	//  |      |      |      |      |
	// -------------------------------
	//  |      |      |      |      |
	//
	// Each character-cell represents a pixel on the output
	// surface, \"@\" represents the current pixel (always somewhere
	// in the bottom half of the current scan-line, or the top-half
	// of the next scanline). The grid of lines represents the
	// edges of the texels of the underlying texture.
	
	// Texture coordinates of the texel containing the active pixel.
	vec2 xy = (CURVATURE > 0.5) ? transform(UV.xy) : UV.xy;
	
	float cval = corner(xy);
	
	// Of all the pixels that are mapped onto the texel we are
	// currently rendering, which pixel are we currently rendering?
	vec2 ilvec = vec2(0.0,ilfac.y * interlace_detect > 1.5 ? mod(float(FrameCount),2.0) : 0.0);
	vec2 ratio_scale = (xy * TextureSize - vec2(0.5) + ilvec)/ilfac;
	
	//#ifdef OVERSAMPLE
	float filter_ = InputSize.y/OutputSize.y;//fwidth(ratio_scale.y);
	//#endif
	
	vec2 uv_ratio = fract(ratio_scale);
	
	// Snap to the center of the underlying texel.
	xy = (floor(ratio_scale)*ilfac + vec2(0.5) - ilvec) / TextureSize;
	
	// Calculate Lanczos scaling coefficients describing the effect
	// of various neighbour texels in a scanline on the current
	// pixel.
	vec4 coeffs = PI * vec4(1.0 + uv_ratio.x, uv_ratio.x, 1.0 - uv_ratio.x, 2.0 - uv_ratio.x);
	
	// Prevent division by zero.
	coeffs = max(abs( coeffs ), 1e-5); // FIX(coeffs)
	
	// Lanczos2 kernel.
	coeffs = 2.0 * sin(coeffs) * sin(coeffs / 2.0) / (coeffs * coeffs);
	
	// Normalize.
	coeffs /= dot(coeffs, vec4(1.0));
	
	// Calculate the effective colour of the current and next
	// scanlines at the horizontal location of the current pixel,
	// using the Lanczos coefficients above.
	vec4 col  = clamp(mat4(
					
					//#ifdef LINEAR_PROCESSING
					pow(texture(TEXTURE, ( xy + vec2(-one.x, 0.0)		)), vec4(CRTgamma)),
					pow(texture(TEXTURE, ( xy							)), vec4(CRTgamma)),
					pow(texture(TEXTURE, ( xy + vec2(one.x, 0.0)		)), vec4(CRTgamma)),
					pow(texture(TEXTURE, ( xy + vec2(2.0 * one.x, 0.0)	)), vec4(CRTgamma))) * coeffs,
					//#else
					//texture(TEXTURE, ( xy + vec2(-one.x, 0.0)		)),
					//texture(TEXTURE, ( xy							)),
					//texture(TEXTURE, ( xy + vec2(one.x, 0.0)		)),
					//texture(TEXTURE, ( xy + vec2(2.0 * one.x, 0.0)	))) * coeffs,
					//#endif
					
					0.0, 1.0);

    vec4 col2 = clamp(mat4(
					
					//#ifdef LINEAR_PROCESSING
					pow(texture(TEXTURE, ( xy + vec2(-one.x, one.y)		)), vec4(CRTgamma)),
					pow(texture(TEXTURE, ( xy + vec2(0.0, one.y)		)), vec4(CRTgamma)),
					pow(texture(TEXTURE, ( xy + one						)), vec4(CRTgamma)),
					pow(texture(TEXTURE, ( xy + vec2(2.0 * one.x, one.y))), vec4(CRTgamma))) * coeffs,
					//#else
					//texture(TEXTURE, ( xy + vec2(-one.x, one.y)		)),
					//texture(TEXTURE, ( xy + vec2(0.0, one.y)		)),
					//texture(TEXTURE, ( xy + one						)),
					//texture(TEXTURE, ( xy + vec2(2.0 * one.x, one.y)))) * coeffs,
					//#endif
					
					0.0, 1.0);
	
	//#ifndef LINEAR_PROCESSING
	//col  = pow(col , vec4(CRTgamma));
	//col2 = pow(col2, vec4(CRTgamma));
	//#endif
	
	// Calculate the influence of the current and next scanlines on
	// the current pixel.
	vec4 weights  = scanlineWeights(uv_ratio.y, col);
	vec4 weights2 = scanlineWeights(1.0 - uv_ratio.y, col2);

	//#ifdef OVERSAMPLE
	uv_ratio.y =uv_ratio.y+1.0/3.0*filter_;
	weights = (weights+scanlineWeights(uv_ratio.y, col))/3.0;
	weights2=(weights2+scanlineWeights(abs(1.0-uv_ratio.y), col2))/3.0;
	uv_ratio.y =uv_ratio.y-2.0/3.0*filter_;
	weights=weights+scanlineWeights(abs(uv_ratio.y), col)/3.0;
	weights2=weights2+scanlineWeights(abs(1.0-uv_ratio.y), col2)/3.0;
	//#endif
	
	vec3 mul_res  = (col * weights + col2 * weights2).rgb * vec3(cval);
	
	// dot-mask emulation:
	// Output pixels are alternately tinted green and magenta.
	vec3 dotMaskWeights = mix(
		vec3(1.0, 1.0 - DOTMASK, 1.0),
		vec3(1.0 - DOTMASK, 1.0, 1.0 - DOTMASK),
		floor(mod(mod_factor, 2.0))
	);
	
	mul_res *= dotMaskWeights;
	
	// Convert the image gamma for display on our output device.
	mul_res = pow(mul_res, vec3(1.0 / monitorgamma));
	
	// Color the texel.
	COLOR = vec4(mul_res, 1.0);
} 
"

[resource]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/CRTgamma = 2.4
shader_param/monitorgamma = 2.2
shader_param/d = 1.6
shader_param/CURVATURE = 1.0
shader_param/R = 2.0
shader_param/cornersize = 0.03
shader_param/cornersmooth = 1000.0
shader_param/x_tilt = 0.0
shader_param/y_tilt = 0.0
shader_param/overscan_x = 100.0
shader_param/overscan_y = 100.0
shader_param/DOTMASK = 0.3
shader_param/SHARPER = 1.0
shader_param/scanline_weight = 0.3
shader_param/lum = 0.0
shader_param/interlace_detect = 1.0
shader_param/OutputSize = Vector2( 1024, 896 )
shader_param/TextureSize = Vector2( 256, 224 )
shader_param/InputSize = Vector2( 256, 224 )
shader_param/FrameCount = 0
